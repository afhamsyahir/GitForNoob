[
  {
    "title": "Introduction to Git",
    "description": "Get started with **Git** by learning what it is, why developers use it, and how to set it up on your system.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "What is Git?",
        "description": "**Git** is a version control system that helps you keep track of file changes. You can see what changed, who changed it, and go back to earlier versions when needed. Each developer has their own full copy of the project, which makes teamwork smooth and safe.",
        "command": "",
        "media": [],
        "items": [],
        "id": 2
      },
      {
        "title": "Why Use Git?",
        "description": "Git acts like an undo button for your projects. It allows you to experiment freely without breaking the main code. Teams can build features independently, review each other's work, and merge it confidently when ready.",
        "command": "",
        "media": [],
        "items": [],
        "id": 3
      },
      {
        "title": "Installing Git",
        "description": "Before you can use Git, install it on your device.\n\n- **Windows:** Use the official installer and keep default options.\n- **macOS:** Install it easily through Homebrew.\n- **Linux (Ubuntu/Debian):** Install with your system package manager.",
        "command": "",
        "media": [],
        "items": [
          {
            "title": "Windows Installation",
            "description": "Download the [Git for Windows installer](https://git-scm.com/download/win), run it, follow the wizard using default settings, and then restart your terminal.",
            "command": "",
            "media": [],
            "items": [],
            "id": 5
          },
          {
            "title": "macOS Installation",
            "description": "Install Git using the Homebrew package manager.",
            "command": "brew install git",
            "media": [],
            "items": [],
            "id": 6
          },
          {
            "title": "Linux Installation (Debian/Ubuntu)",
            "description": "Install Git with your package manager.",
            "command": "sudo apt-get install git -y",
            "media": [],
            "items": [],
            "id": 7
          }
        ],
        "id": 4
      },
      {
        "title": "Initial Git Configuration",
        "description": "After installing Git, set your name and email so commits identify you correctly.\n\n> **VS Code GUI Tip:** Open VS Code → **Terminal → New Terminal**, run both commands, then type `git config --list` to verify. You only need to do this once per computer.",
        "command": "git config --global user.name \"Your Name\"\ngit config --global user.email \"your@email.com\"",
        "media": [],
        "items": [],
        "id": 8
      },
      {
        "title": "Verify Installation",
        "description": "Run these commands to ensure Git is ready to use.",
        "command": "git --version\ngit config --list",
        "media": [],
        "items": [],
        "id": 10
      }
    ],
    "id": 1
  },
  {
    "title": "Core Git Workflow",
    "description": "Understand how Git moves your work from edits, to staging, to final commits saved in history.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "How Git Tracks Changes",
        "description": "Git works in three areas:\n\n1. **Working Directory** – where you make changes.\n2. **Staging Area** – where you review and prepare what will be saved.\n3. **Repository** – where completed commits are stored.\n\nIt’s a bit like writing a document: draft freely (working), choose paragraphs to keep (staging), and save once ready (commit).",
        "command": "",
        "media": [],
        "items": [],
        "id": 12
      },
      {
        "title": "Check Project Status",
        "description": "See which files are new, modified, or staged.\n\n> **VS Code GUI Tip:** Click the **Source Control** icon (Ctrl + Shift + G). You’ll see modified files marked as **M**, new ones as **U**, and staged files highlighted in green.",
        "command": "git status",
        "media": [],
        "items": [],
        "id": 13
      },
      {
        "title": "Add and Commit",
        "description": "After editing files, stage the ones you want to include in your snapshot and commit them with a short descriptive message.\n\n> **VS Code GUI Tip:** Use the **+** icon beside each file to stage it. Add a brief message in the text box, then press **Ctrl + Enter** or click **Commit**.",
        "command": "git add <filename>\ngit commit -m \"Describe your change here\"",
        "media": [],
        "items": [],
        "id": 15
      },
      {
        "title": "Ignore Temporary Files",
        "description": "To prevent unnecessary files (like builds or logs) from being tracked, list them in a `.gitignore` file.",
        "command": "echo 'node_modules/' >> .gitignore\ngit add .gitignore\ngit commit -m \"Add .gitignore file\"",
        "media": [],
        "items": [],
        "id": 17
      }
    ],
    "id": 11
  },
  {
    "title": "Branching and Merging",
    "description": "Use branches to work on new ideas without touching the main codebase. Merge them when they’re ready.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "Create and Switch Branches",
        "description": "A branch lets you isolate your work. Create one for each feature or fix so development stays separate and clean.\n\n> **VS Code GUI Tip:** Click the current branch name in the bottom-left corner. From there you can create, rename, or switch branches easily.",
        "command": "git branch feature-1\ngit checkout feature-1",
        "media": [],
        "items": [],
        "id": 19
      },
      {
        "title": "Merge Branches",
        "description": "When your branch work is tested and complete, merge it into `main`. Git will combine your updates automatically unless there are conflicts.\n\n> **VS Code GUI Tip:** First switch to `main`, then open **Source Control → ... → Merge Branch...** and select the branch with your changes.",
        "command": "git checkout main\ngit merge feature-1",
        "media": [],
        "items": [],
        "id": 21
      }
    ],
    "id": 18
  },
  {
    "title": "Connecting to Azure DevOps",
    "description": "Connect your local Git project to a remote repository in **Azure DevOps** so you can back up work and collaborate with others.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "Add Remote Repository",
        "description": "Link your local project to an Azure DevOps repository. This enables pushing and pulling code between local and cloud.\n\n> **Azure DevOps Tip:** In your Azure DevOps project, go to **Repos → Files → Clone**, copy the HTTPS URL, and paste it into the command above. You can confirm by running `git remote -v`.",
        "command": "git remote add origin https://dev.azure.com/<org>/<project>/_git/<repo>",
        "media": [],
        "items": [],
        "id": 24
      },
      {
        "title": "Push to Azure DevOps",
        "description": "Once the remote link is ready, send your local commits to the cloud repository.\n\n> **VS Code GUI Tip:** Click **Sync Changes** in the **Source Control** panel (circle arrows). The status bar will show upload progress.\n\n> **Azure DevOps Tip:** Visit **Repos → Files** in Azure DevOps. You should now see your code online, ready for teammates to access.",
        "command": "git branch -M main\ngit push -u origin main",
        "media": [],
        "items": [],
        "id": 26
      }
    ],
    "id": 23
  },
  {
    "title": "Pull Requests and Collaboration",
    "description": "Collaborate with teammates using Pull Requests (PRs). They make reviewing and merging code organized and reliable.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "Create a Pull Request",
        "description": "After pushing a branch, propose your changes by opening a Pull Request in Azure DevOps for feedback and approval.\n\n> **Azure DevOps Tip:** Go to **Repos → Pull Requests → New Pull Request**. Select your source branch (for example, `feature-update`) and target branch (`main`). Write a title, add reviewers, and click **Create**. Teammates can then review and comment before approval.\n\n> **VS Code GUI Tip:** If you install the **Azure Repos** extension, you can open pull requests, leave comments, and review feedback directly from VS Code without switching to the browser.",
        "command": "",
        "media": [],
        "items": [],
        "id": 30
      },
      {
        "title": "Merge and Clean Up",
        "description": "Once the Pull Request is approved and merged, delete the branch locally and remotely to keep your repository tidy.",
        "command": "git branch -d feature-update\ngit push origin --delete feature-update",
        "media": [],
        "items": [],
        "id": 33
      }
    ],
    "id": 29
  },
  {
    "title": "Troubleshooting and Best Practices",
    "description": "Handle mistakes easily and keep your repository healthy as projects grow.",
    "command": "",
    "media": [],
    "items": [
      {
        "title": "Undo Local Changes",
        "description": "Restore a file to how it was in the last commit if you made unwanted edits.",
        "command": "git restore <filename>",
        "media": [],
        "items": [],
        "id": 35
      },
      {
        "title": "Undo Last Commit but Keep Work",
        "description": "Remove the previous commit but keep your changes so you can fix something and recommit.",
        "command": "git reset --soft HEAD~1",
        "media": [],
        "items": [],
        "id": 36
      },
      {
        "title": "Revert a Specific Commit",
        "description": "If a certain commit caused problems, create a new one that undoes it instead of rewriting history.",
        "command": "git revert <commit-id>",
        "media": [],
        "items": [],
        "id": 37
      },
      {
        "title": "Good Habits",
        "description": "- Always pull before pushing to reduce merge conflicts.\n- Write clear messages that describe why changes were made.\n- Keep feature work in separate branches.\n- Keep `main` branch stable for everyone.",
        "command": "",
        "media": [],
        "items": [],
        "id": 38
      }
    ],
    "id": 34
  },
  {
    "title": "Git Command Cheatsheet",
    "description": "A quick reference to Git commands used in this course.",
    "command": "",
    "media": [
      {
        "path": "cheatsheet.md"
      }
    ],
    "items": [],
    "id": 39
  }
]
